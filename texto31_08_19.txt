React Native - framework de desenvolvimento de aplicativos m�veis. Usa ferramentas como o reactJs,
assim, usar 2 linguagens para web e mobile n eh necessario. Com essa framework eh possivel compilar para
IOS e Android, com um codigo soh

expo - Permite emulacao de aplicativos para Android no seu celular por meio de um QR code

No diret�rio do projeto:

- assets: onde vc deve armazenar imagens
- App.js: Arquivo principal, onde o codigo do projeto fica


No codigo do App.js;

- A importacao de modulos react e reactnative ocorrem nas duas primeiras linha.
- StyleSheet: aqui, voce edita o estilo do componente atraves do CSS
- Text: usado pra qualquer texto
- View: semelhante a div do HTML. Podemos ter views com estilos diferentes

Transformando funcoes em classes:

Funcoes sao mais leves que classes, porem, com classes podemos mudar mais e adicionar mais coisas





State:
State eh o estado da aplicacao, por isso, eh no state onde as informacoes da aplicacao.
Se criarmos um contador, e definirmos para ele o estado de 0,
o estado naquele tempo dele eh 0. Porem, conforme o contador se altera,
seu estado tambem altera. O state serve para armazenar valores de uma
determinada aplicacao, que muda conforme seu uso. O que o react faz,
eh fazer com que as alteracoes armazenadas no state sejam renderizadas
separadamente, isto eh, apenas as partes que foram modificadas sao alteradas e
renderizadas e nao a pagina toda, assim, nao precisamos dar refresh


O codigo "super" nos permite usar outros codigos relacionados 
a orientacao a objeto, como o "this". 

this.state = {
    data: ""
};

Esse sera o estado inicial de algo. Estamos chamando este algo de data.
Isso que o estado inicial de data eh vazio.


    async meuIp(){
      this.setState({
        data:"You can't run away from fish..."
      });
      const ip = await fetch("http://httpbin.org/ip");
      const novoip = await ip.json();
      this.setState({
        data: novoip.origin
      });
    }

No metodo assincrono, adicionamos para o estado do data para "you cant run away from fish" para 
o botao, ja que soh iremos mudar o data quando o API estiver respondendo com o IP. Enquanto ele espera,
o estado do data vai ser de espera. 

A constante ip vai basicamente pegar o valor do URL httpbin.org/ip, que basicamente retorna o IP.
Depois, armazenamos essa variavel em formato de json, na constante novoip. 
Usando o setState, vamos mudar o estado de data para o IP obtido, ao inves de "You cant run away from fish". 

<Text style = {styles.ip}>{this.state.data}}</Text>

atraves do estado do data que criamos, estamos mudando o texto em cima do botao para o IP

<Button title = "Fish would like to know your location" onPress={this.meuIp}/>

quando clicarmos no botao, o texto mudara para o valor retornado no meuIp, este sendo, o data.json